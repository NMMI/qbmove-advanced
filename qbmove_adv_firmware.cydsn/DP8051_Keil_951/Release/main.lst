C51 COMPILER V9.51   MAIN                                                                  02/14/2017 15:09:52 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\main.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDEBUG) WL(2) PR(.\DP8051_Keil_9
                    -51\Release/main.lst) CD OT(8,SPEED) OJ(.\DP8051_Keil_951\Release\main.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          // ----------------------------------------------------------------------------
   2          // Copyright (C)  qbrobotics. All rights reserved.
   3          // www.qbrobotics.com
   4          // ----------------------------------------------------------------------------
   5          
   6          
   7          /**
   8          * \file         main.c
   9          *
  10          * \brief        Firmware main file.
  11          * \date         May 13, 2016
  12          * \author       qbrobotics
  13          * \copyright    (C)  qbrobotics. All rights reserved.
  14          */
  15          
  16          /**
  17          * \mainpage     Firmware
  18          * \brief        This is the firmware of the qb move.
  19          * \version      0.1 beta 4
  20          *
  21          * \author       _qbrobotics_
  22          *
  23          * \date         May 13, 2016
  24          *
  25          * \details      This is the firmware of the qb move.
  26          *
  27          * \copyright    (C)  qbrobotics. All rights reserved.
  28          *
  29          */
  30          
  31          
  32          // ----------------------------------------------------------------------------
  33          // This version changes:
  34          //      - not reported
  35          
  36          
  37          //=================================================================     includes
  38          
  39          #include <device.h>
  40          #include <globals.h> // ALL GLOBAL DEFINITIONS, STRUCTURES AND MACROS HERE
  41          #include <interruptions.h>
  42          #include <command_processing.h>
  43          
  44          //==============================================================================
  45          //                                                                 MAIN FUNCTION
  46          //==============================================================================
  47          
  48          int main() {
  49   1          
  50   1          // Iterator
  51   1          uint8 i;         
  52   1          
C51 COMPILER V9.51   MAIN                                                                  02/14/2017 15:09:52 PAGE 2   

  53   1          // Variable declarations for DMA 
  54   1          
  55   1          uint8 DMA_Chan;
  56   1          uint8 DMA_TD[1];
  57   1      
  58   1          //================================     initializations - psoc and components
  59   1      
  60   1          // EEPROM
  61   1      
  62   1          EEPROM_Start();
  63   1          memRecall();                                        // recall configuration
  64   1      
  65   1          // FTDI chip enable
  66   1      
  67   1          CyDelay(100);
  68   1          FTDI_ENABLE_REG_Write(0x01);
  69   1          
  70   1          // RS485
  71   1      
  72   1          UART_RS485_Stop();                                  // stop UART
  73   1          UART_RS485_Start();                                 // start UART
  74   1          UART_RS485_Init();
  75   1      
  76   1          UART_RS485_ClearRxBuffer();
  77   1          UART_RS485_ClearTxBuffer();
  78   1      
  79   1          ISR_RS485_RX_StartEx(ISR_RS485_RX_ExInterrupt);     // RS485 isr function
  80   1          
  81   1          // WATCHDOG
  82   1          
  83   1          WATCHDOG_COUNTER_Start();
  84   1          
  85   1          ISR_WATCHDOG_StartEx(ISR_WATCHDOG_Handler);         // WATCHDOG isr function    
  86   1      
  87   1          // PWM
  88   1      
  89   1          PWM_MOTORS_Start();
  90   1          PWM_MOTORS_WriteCompare1(0);
  91   1          PWM_MOTORS_WriteCompare2(0);
  92   1          MOTOR_DIR_Write(0);
  93   1          MOTOR_ON_OFF_Write(0x00);
  94   1      
  95   1      
  96   1          // SSI encoder initializations
  97   1      
  98   1          COUNTER_ENC_Start();
  99   1          SHIFTREG_ENC_1_Start();
 100   1          SHIFTREG_ENC_2_Start();
 101   1          SHIFTREG_ENC_3_Start();
 102   1          
 103   1          #if NUM_OF_SENSORS == 4
                      SHIFTREG_ENC_4_Start();
                  #endif
 106   1      
 107   1      
 108   1          // ADC
 109   1      
 110   1          ADC_Start();                                        // start ADC
 111   1          ADC_SOC_Write(0x01);                                // Force first read cycle
 112   1         
 113   1          // DMA
 114   1          DMA_Chan = DMA_DmaInitialize(DMA_BYTES_PER_BURST, DMA_REQUEST_PER_BURST, HI16(DMA_SRC_BASE), HI16(DMA_
C51 COMPILER V9.51   MAIN                                                                  02/14/2017 15:09:52 PAGE 3   

             -DST_BASE));
 115   1          DMA_TD[0] = CyDmaTdAllocate();                                                                        
             -  // Allocate TD
 116   1          CyDmaTdSetConfiguration(DMA_TD[0], 2 * 3, DMA_TD[0], TD_SWAP_EN | DMA__TD_TERMOUT_EN | TD_INC_DST_ADR)
             -; // DMA Configurations
 117   1          CyDmaTdSetAddress(DMA_TD[0], LO16((uint32)ADC_DEC_SAMP_PTR), LO16((uint32)ADC_buf));                  
             -  // Set Register Address
 118   1          CyDmaChSetInitialTd(DMA_Chan, DMA_TD[0]);                                                             
             -  // Initialize Channel
 119   1          
 120   1          CyDmaChEnable(DMA_Chan, 1);                                                                           
             -  // Enable DMA
 121   1      
 122   1          RS485_CTS_Write(0);                                 // Clear To Send on RS485
 123   1      
 124   1          // TIMER
 125   1      
 126   1          MY_TIMER_Start();           
 127   1          PACER_TIMER_Start();
 128   1      
 129   1          CYGlobalIntEnable;                                  // enable interrupts
 130   1      
 131   1          //====================================     initializations - clean variables
 132   1      
 133   1          CyDelay(10);                                        // Wait for encoders to have a valid value
 134   1      
 135   1          //---------------------------------------------------  Initialize referiment structure
 136   1          for (i = NUM_OF_MOTORS; i--;) 
 137   1              g_ref.pos[i] = 0;
 138   1      
 139   1          //---------------------------------------------------  Initialize measurement structure
 140   1          for (i = NUM_OF_SENSORS; i--;) { 
 141   2              g_meas.pos[i] = 0;
 142   2              g_meas.rot[i] = 0;
 143   2          }
 144   1         
 145   1          g_refNew = g_ref;                                   // Initialize k+1 measurements structure
 146   1      
 147   1          g_ref.onoff = c_mem.activ;                          // Initalize Activation
 148   1          
 149   1          reset_counters();                                   // Reset commands set counters
 150   1          
 151   1          RESET_COUNTERS_Write(0x00);
 152   1          
 153   1          //------------------------------------------------- Initialize packge on receive from RS485
 154   1          g_rx.length = 0;
 155   1          g_rx.ready  = 0;
 156   1      
 157   1      
 158   1          MOTOR_ON_OFF_Write(g_ref.onoff);                    // Activating motors
 159   1      
 160   1          
 161   1          dev_pwm_limit = 0;                                  // Init PWM limit
 162   1          tension_valid = FALSE;                              // Init tension_valid BIT
 163   1      
 164   1          calibration_flag = STOP;
 165   1          reset_last_value_flag = 0;
 166   1          
 167   1          //------------------------------------------------- Initialize WDT
 168   1          // Check on disable WTD on startup
 169   1          if (g_mem.watchdog_period == 0) 
 170   1              WATCHDOG_ENABLER_Write(1);                      // Disabled
C51 COMPILER V9.51   MAIN                                                                  02/14/2017 15:09:52 PAGE 4   

 171   1          else
 172   1              WATCHDOG_ENABLER_Write(0);                      // Enabled
 173   1      
 174   1          //============================================================     main loop
 175   1      
 176   1          for(;;)
 177   1          {
 178   2              // Put the FF reset pin to LOW
 179   2              RESET_FF_Write(0x00);
 180   2      
 181   2              // Call function scheduler
 182   2              function_scheduler();
 183   2      
 184   2              //  Wait until the FF is set to 1
 185   2              while(FF_STATUS_Read() == 0){
 186   3                  // On interrupt from RS485
 187   3                  if (interrupt_flag){
 188   4                      // Reset WDT
 189   4                      WATCHDOG_REFRESH_Write(0x01);
 190   4                      // Reset flags
 191   4                      interrupt_flag = FALSE;
 192   4                      watchdog_flag = FALSE;
 193   4                      // Manage Interrupt on rs485
 194   4                      interrupt_manager();
 195   4                  }
 196   3                  // On interrupt from WDT
 197   3                  else { 
 198   4                      if (watchdog_flag){
 199   5                          // Reset WDT
 200   5                          WATCHDOG_REFRESH_Write(0x01);
 201   5                          // Disactivate motors
 202   5                          g_refNew.onoff = 0x00;
 203   5                      }
 204   4                  }
 205   3              };
 206   2      
 207   2              // Command a FF reset
 208   2              RESET_FF_Write(0x01);
 209   2      
 210   2              // Wait for FF to be reset
 211   2              while(FF_STATUS_Read() == 1);
 212   2      
 213   2              if(UART_RS485_ReadRxStatus() & UART_RS485_RX_STS_SOFT_BUFF_OVER)
 214   2                  UART_RS485_ClearRxBuffer();
 215   2          }
 216   1          return 0;
 217   1      }
 218          
 219          /* [] END OF FILE */
C51 COMPILER V9.51   MAIN                                                                  02/14/2017 15:09:52 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 62
0000 120000      E     LCALL   EEPROM_Start
                                           ; SOURCE LINE # 63
0003 120000      E     LCALL   memRecall
                                           ; SOURCE LINE # 67
0006 E4                CLR     A
0007 7F64              MOV     R7,#064H
0009 FE                MOV     R6,A
000A FD                MOV     R5,A
000B FC                MOV     R4,A
000C 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 68
000F 7F01              MOV     R7,#01H
0011 120000      E     LCALL   _FTDI_ENABLE_REG_Write
                                           ; SOURCE LINE # 72
0014 120000      E     LCALL   UART_RS485_Stop
                                           ; SOURCE LINE # 73
0017 120000      E     LCALL   UART_RS485_Start
                                           ; SOURCE LINE # 74
001A 120000      E     LCALL   UART_RS485_Init
                                           ; SOURCE LINE # 76
001D 120000      E     LCALL   UART_RS485_ClearRxBuffer
                                           ; SOURCE LINE # 77
0020 120000      E     LCALL   UART_RS485_ClearTxBuffer
                                           ; SOURCE LINE # 79
0023 7E00        E     MOV     R6,#HIGH ISR_RS485_RX_ExInterrupt
0025 7F00        E     MOV     R7,#LOW ISR_RS485_RX_ExInterrupt
0027 120000      E     LCALL   _ISR_RS485_RX_StartEx
                                           ; SOURCE LINE # 83
002A 120000      E     LCALL   WATCHDOG_COUNTER_Start
                                           ; SOURCE LINE # 85
002D 7E00        E     MOV     R6,#HIGH ISR_WATCHDOG_Handler
002F 7F00        E     MOV     R7,#LOW ISR_WATCHDOG_Handler
0031 120000      E     LCALL   _ISR_WATCHDOG_StartEx
                                           ; SOURCE LINE # 89
0034 120000      E     LCALL   PWM_MOTORS_Start
                                           ; SOURCE LINE # 90
0037 E4                CLR     A
0038 FF                MOV     R7,A
0039 120000      E     LCALL   _PWM_MOTORS_WriteCompare1
                                           ; SOURCE LINE # 91
003C E4                CLR     A
003D FF                MOV     R7,A
003E 120000      E     LCALL   _PWM_MOTORS_WriteCompare2
                                           ; SOURCE LINE # 92
0041 E4                CLR     A
0042 FF                MOV     R7,A
0043 120000      E     LCALL   _MOTOR_DIR_Write
                                           ; SOURCE LINE # 93
0046 E4                CLR     A
0047 FF                MOV     R7,A
0048 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 98
004B 120000      E     LCALL   COUNTER_ENC_Start
                                           ; SOURCE LINE # 99
004E 120000      E     LCALL   SHIFTREG_ENC_1_Start
                                           ; SOURCE LINE # 100
C51 COMPILER V9.51   MAIN                                                                  02/14/2017 15:09:52 PAGE 6   

0051 120000      E     LCALL   SHIFTREG_ENC_2_Start
                                           ; SOURCE LINE # 101
0054 120000      E     LCALL   SHIFTREG_ENC_3_Start
                                           ; SOURCE LINE # 110
0057 120000      E     LCALL   ADC_Start
                                           ; SOURCE LINE # 111
005A 7F01              MOV     R7,#01H
005C 120000      E     LCALL   _ADC_SOC_Write
                                           ; SOURCE LINE # 114
005F E4                CLR     A
0060 900000      E     MOV     DPTR,#?_DMA_DmaInitialize?BYTE+04H
0063 F0                MOVX    @DPTR,A
0064 A3                INC     DPTR
0065 F0                MOVX    @DPTR,A
0066 FB                MOV     R3,A
0067 FA                MOV     R2,A
0068 7D01              MOV     R5,#01H
006A 7F02              MOV     R7,#02H
006C 120000      E     LCALL   _DMA_DmaInitialize
006F 900000      R     MOV     DPTR,#DMA_Chan
0072 EF                MOV     A,R7
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 115
0074 120000      E     LCALL   CyDmaTdAllocate
0077 900000      R     MOV     DPTR,#DMA_TD
007A EF                MOV     A,R7
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 116
007C E0                MOVX    A,@DPTR
007D FB                MOV     R3,A
007E FF                MOV     R7,A
007F 900000      E     MOV     DPTR,#?_CyDmaTdSetConfiguration?BYTE+04H
0082 7486              MOV     A,#086H
0084 F0                MOVX    @DPTR,A
0085 7D06              MOV     R5,#06H
0087 7C00              MOV     R4,#00H
0089 120000      E     LCALL   _CyDmaTdSetConfiguration
                                           ; SOURCE LINE # 117
008C 7B01              MOV     R3,#01H
008E 7A00        E     MOV     R2,#HIGH ADC_buf
0090 7900        E     MOV     R1,#LOW ADC_buf
0092 E9                MOV     A,R1
0093 EA                MOV     A,R2
0094 E4                CLR     A
0095 AB01              MOV     R3,AR1
0097 900000      R     MOV     DPTR,#DMA_TD
009A E0                MOVX    A,@DPTR
009B FF                MOV     R7,A
009C 7D10              MOV     R5,#010H
009E 7C4E              MOV     R4,#04EH
00A0 120000      E     LCALL   _CyDmaTdSetAddress
                                           ; SOURCE LINE # 118
00A3 900000      R     MOV     DPTR,#DMA_Chan
00A6 E0                MOVX    A,@DPTR
00A7 FF                MOV     R7,A
00A8 A3                INC     DPTR
00A9 E0                MOVX    A,@DPTR
00AA FD                MOV     R5,A
00AB 120000      E     LCALL   _CyDmaChSetInitialTd
                                           ; SOURCE LINE # 120
00AE 900000      R     MOV     DPTR,#DMA_Chan
00B1 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   MAIN                                                                  02/14/2017 15:09:52 PAGE 7   

00B2 FF                MOV     R7,A
00B3 7D01              MOV     R5,#01H
00B5 120000      E     LCALL   _CyDmaChEnable
                                           ; SOURCE LINE # 122
00B8 E4                CLR     A
00B9 FF                MOV     R7,A
00BA 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 126
00BD 120000      E     LCALL   MY_TIMER_Start
                                           ; SOURCE LINE # 127
00C0 120000      E     LCALL   PACER_TIMER_Start
                                           ; SOURCE LINE # 129
00C3 D2AF              SETB    EA
00C5 9044F4            MOV     DPTR,#044F4H
00C8 74FD              MOV     A,#0FDH
00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 133
00CB E4                CLR     A
00CC 7F0A              MOV     R7,#0AH
00CE FE                MOV     R6,A
00CF FD                MOV     R5,A
00D0 FC                MOV     R4,A
00D1 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 136
;---- Variable 'i' assigned to Register 'R3' ----
00D4 7B02              MOV     R3,#02H
00D6         ?C0001:
00D6 AF03              MOV     R7,AR3
00D8 1B                DEC     R3
00D9 EF                MOV     A,R7
00DA 6018              JZ      ?C0002
                                           ; SOURCE LINE # 137
00DC E4                CLR     A
00DD FF                MOV     R7,A
00DE FE                MOV     R6,A
00DF FD                MOV     R5,A
00E0 FC                MOV     R4,A
00E1 EB                MOV     A,R3
00E2 25E0              ADD     A,ACC
00E4 25E0              ADD     A,ACC
00E6 2400        E     ADD     A,#LOW g_ref
00E8 F582              MOV     DPL,A
00EA E4                CLR     A
00EB 3400        E     ADDC    A,#HIGH g_ref
00ED F583              MOV     DPH,A
00EF 120000      E     LCALL   ?C?LSTXDATA
00F2 80E2              SJMP    ?C0001
00F4         ?C0002:
                                           ; SOURCE LINE # 140
00F4 7B03              MOV     R3,#03H
00F6         ?C0003:
00F6 AF03              MOV     R7,AR3
00F8 1B                DEC     R3
00F9 EF                MOV     A,R7
00FA 6024              JZ      ?C0004
                                           ; SOURCE LINE # 141
00FC E4                CLR     A
00FD FF                MOV     R7,A
00FE FE                MOV     R6,A
00FF FD                MOV     R5,A
0100 FC                MOV     R4,A
0101 EB                MOV     A,R3
C51 COMPILER V9.51   MAIN                                                                  02/14/2017 15:09:52 PAGE 8   

0102 25E0              ADD     A,ACC
0104 25E0              ADD     A,ACC
0106 2400        E     ADD     A,#LOW g_meas
0108 F582              MOV     DPL,A
010A E4                CLR     A
010B 3400        E     ADDC    A,#HIGH g_meas
010D F583              MOV     DPH,A
010F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 142
0112 7400        E     MOV     A,#LOW g_meas+014H
0114 2B                ADD     A,R3
0115 F582              MOV     DPL,A
0117 E4                CLR     A
0118 3400        E     ADDC    A,#HIGH g_meas+014H
011A F583              MOV     DPH,A
011C E4                CLR     A
011D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
011E 80D6              SJMP    ?C0003
0120         ?C0004:
                                           ; SOURCE LINE # 145
0120 7800        E     MOV     R0,#LOW g_refNew
0122 7C00        E     MOV     R4,#HIGH g_refNew
0124 7D01              MOV     R5,#01H
0126 7B01              MOV     R3,#01H
0128 7A00        E     MOV     R2,#HIGH g_ref
012A 7900        E     MOV     R1,#LOW g_ref
012C 7E00              MOV     R6,#00H
012E 7F19              MOV     R7,#019H
0130 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 147
0133 900000      E     MOV     DPTR,#c_mem+034H
0136 E0                MOVX    A,@DPTR
0137 900000      E     MOV     DPTR,#g_ref+018H
013A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
013B 120000      E     LCALL   reset_counters
                                           ; SOURCE LINE # 151
013E E4                CLR     A
013F FF                MOV     R7,A
0140 120000      E     LCALL   _RESET_COUNTERS_Write
                                           ; SOURCE LINE # 154
0143 E4                CLR     A
0144 900000      E     MOV     DPTR,#g_rx+080H
0147 F0                MOVX    @DPTR,A
0148 A3                INC     DPTR
0149 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 155
014A 900000      E     MOV     DPTR,#g_rx+084H
014D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
014E 900000      E     MOV     DPTR,#g_ref+018H
0151 E0                MOVX    A,@DPTR
0152 FF                MOV     R7,A
0153 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 161
0156 E4                CLR     A
0157 900000      E     MOV     DPTR,#dev_pwm_limit
015A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
015B C200        E     CLR     tension_valid
                                           ; SOURCE LINE # 164
C51 COMPILER V9.51   MAIN                                                                  02/14/2017 15:09:52 PAGE 9   

015D 900000      E     MOV     DPTR,#calibration_flag
0160 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
0161 C200        E     CLR     reset_last_value_flag
                                           ; SOURCE LINE # 169
0163 900000      E     MOV     DPTR,#g_mem+066H
0166 E0                MOVX    A,@DPTR
0167 7007              JNZ     ?C0005
                                           ; SOURCE LINE # 170
0169 7F01              MOV     R7,#01H
016B 120000      E     LCALL   _WATCHDOG_ENABLER_Write
016E 8005              SJMP    ?C0007
0170         ?C0005:
                                           ; SOURCE LINE # 172
0170 E4                CLR     A
0171 FF                MOV     R7,A
0172 120000      E     LCALL   _WATCHDOG_ENABLER_Write
                                           ; SOURCE LINE # 176
0175         ?C0007:
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 179
0175 E4                CLR     A
0176 FF                MOV     R7,A
0177 120000      E     LCALL   _RESET_FF_Write
                                           ; SOURCE LINE # 182
017A 120000      E     LCALL   function_scheduler
017D         ?C0009:
                                           ; SOURCE LINE # 185
017D 120000      E     LCALL   FF_STATUS_Read
0180 EF                MOV     A,R7
0181 7020              JNZ     ?C0010
                                           ; SOURCE LINE # 187
0183 30000E            JNB     interrupt_flag,?C0011
                                           ; SOURCE LINE # 189
0186 7F01              MOV     R7,#01H
0188 120000      E     LCALL   _WATCHDOG_REFRESH_Write
                                           ; SOURCE LINE # 191
018B C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 192
018D C200        E     CLR     watchdog_flag
                                           ; SOURCE LINE # 194
018F 120000      E     LCALL   interrupt_manager
                                           ; SOURCE LINE # 195
0192 80E9              SJMP    ?C0009
0194         ?C0011:
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
0194 3000E6            JNB     watchdog_flag,?C0009
                                           ; SOURCE LINE # 200
0197 7F01              MOV     R7,#01H
0199 120000      E     LCALL   _WATCHDOG_REFRESH_Write
                                           ; SOURCE LINE # 202
019C E4                CLR     A
019D 900000      E     MOV     DPTR,#g_refNew+018H
01A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
01A1 80DA              SJMP    ?C0009
01A3         ?C0010:
                                           ; SOURCE LINE # 208
01A3 7F01              MOV     R7,#01H
C51 COMPILER V9.51   MAIN                                                                  02/14/2017 15:09:52 PAGE 10  

01A5 120000      E     LCALL   _RESET_FF_Write
01A8         ?C0014:
                                           ; SOURCE LINE # 211
01A8 120000      E     LCALL   FF_STATUS_Read
01AB EF                MOV     A,R7
01AC 6401              XRL     A,#01H
01AE 60F8              JZ      ?C0014
01B0         ?C0015:
                                           ; SOURCE LINE # 213
01B0 120000      E     LCALL   UART_RS485_ReadRxStatus
01B3 EF                MOV     A,R7
01B4 30E7BE            JNB     ACC.7,?C0007
                                           ; SOURCE LINE # 214
01B7 120000      E     LCALL   UART_RS485_ClearRxBuffer
                                           ; SOURCE LINE # 215
01BA 80B9              SJMP    ?C0007
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 217
01BC         ?C0017:
01BC 22                RET     
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    445    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
